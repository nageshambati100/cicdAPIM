name: APIM CICD

on:
  push:
    branches:
      - main
jobs:
  publish_and_create_api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Login to Anypoint Platform
        id: login
        env:
          CLIENT_ID: ${{ secrets.MULESOFT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.MULESOFT_CLIENT_SECRET }}
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
          "https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&grant_type=client_credentials")

          if [ "$RESPONSE" != "200" ]; then
            echo "Error: Failed to obtain Anypoint Platform access token. Response code: $RESPONSE"
            exit 1
          fi
          TOKEN_RESPONSE=$(curl -s -X POST \
          https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token \
          -H 'Content-Type: application/x-www-form-urlencoded' \
          -d "client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&grant_type=client_credentials")
          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')
          if [[ -z "$ACCESS_TOKEN" ]]; then
            echo "Error: Failed to login to Anypoint Platform"
            exit 1
          fi
          echo "Logged in to Anypoint Platform successfully"
          echo "::set-output name=access_token::$ACCESS_TOKEN"
          echo "Access Token: $ACCESS_TOKEN"
          echo "::set-output name=ACCESS_TOKEN::$ACCESS_TOKEN"
          
      - name: Publish Asset to Exchange
        env:
          ACCESS_TOKEN: ${{ steps.login.outputs.ACCESS_TOKEN }}"
          echo "Access Token: ${{ steps.login.outputs.ACCESS_TOKEN }}"
        run: |
          if [ ! -e "asset_details.txt" ]; then
           echo "Error: asset_details.txt not found"
           exit 1
          fi
           echo "Asset_details.txt file available"
           export $(grep -v '^#' asset_details.txt | xargs); \
           RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null --location 'https://anypoint.mulesoft.com/exchange/api/v1/assets' \
             --header 'Authorization: Bearer 0e88033a-be36-4a37-b755-47400e7afb41' \
             --form "organizationId=$ORG_ID" \
             --form "groupId=$GROUP_ID" \
             --form "assetId=$ASSET_ID" \
             --form "version=$VERSION" \
             --form "name=$NAME" \
             --form "classifier=$CLASSIFIER" \
             --form "apiVersion=$API_VERSION" \
             --form "asset=@./calculator.raml")
            echo "Asset publish response: $RESPONSE"
            echo "environment variables $ORG_ID"
            if [ "$RESPONSE" != "201" ] && [ "$RESPONSE" != "200" ]; then
             echo "Error: Failed to publish asset to Exchange. Response code: $RESPONSE"
             exit 1
           fi
           echo "::set-output name=status::$status"
           echo "Asset published successfully with status code ${{ steps.publish_asset.outputs.status }}"
        id: publish_asset
        
      - name: Check if API ID exists in API Manager
        run: |
          if [ -f api_id.txt ]; then
            echo "API ID file exists. Updating API..."
            api_id=$(curl --location --request PATCH 'https://anypoint.mulesoft.com/apimanager/api/v1/organizations/8ccbc578-b790-45f9-9859-bca06c81adcd/environments/7001f5f5-7165-4e3c-833b-f63282df9523/apis/18660433' \
              --header 'Authorization: Bearer 4d358cd1-351c-467e-ac51-40074f49909a' \
              --header 'Content-Type: application/json' \
              --header 'Cookie: XSRF-TOKEN=e0WEQ67j-QASPpTuShsNYflSHjsDz15w2lSU; _csrf=oKQwgbfiUHeFPqnIfDz_rsKd; mulesoft.sess=eyJpZCI6IkViVVJfWHFzM1g5Z1hkU201MWhhblgzTmJyS1V0RXdUIiwicGFzc3BvcnQiOnsidXNlciI6eyJ1c2VyX2lkIjoiZmU0ZDgzYjUtNGFmMi00MGZhLWFkYjgtMTJhNmQ1ZTdiYzVhIn19fQ==; mulesoft.sess.sig=G8muQqC4Sdlivayk8QKMYZgoYtk' \
              --data '{"spec":{"groupId":"8ccbc578-b790-45f9-9859-bca06c81adcd","assetId":"mycicddemoapi28april","version":"1.0.1"},"endpoint":{"uri":null,"proxyUri":null,"isCloudHub":true,"muleVersion4OrAbove":true,"type":null,"deploymentType":"CH"},"instanceLabel":"testCICD"}' | jq -r '.id')
            echo "API Updated in API Manager with ID ${api_id}"
            echo "${api_id}" > ./mynewapiid.txt
          else
            echo "API ID file does not exist. Creating API..."
            api_id=$(curl --location 'https://anypoint.mulesoft.com/apimanager/api/v1/organizations/8ccbc578-b790-45f9-9859-bca06c81adcd/environments/7001f5f5-7165-4e3c-833b-f63282df9523/apis' \
              --header 'Authorization: Bearer 0e88033a-be36-4a37-b755-47400e7afb41' \
              --form 'Content-Type="application/zip"' \
              --form 'name="file"' \
              --form 'filename=@./test.raml' | jq -r '.id')
          echo "API created in API Manager with ID ${api_id}"
            echo "${api_id}" > ./api_id.txt
          fi      
      - name: Commit API ID file to repo
        run: |
         git config --local user.email "nageshambati100@gmail.com"
         git config --local user.name "nageshambati100"
         git add ./mynewapiid.txt
         git commit -m "Add API ID"
      - name: Read API ID
        run: |
          new_api_id=$(cat ./mynewapiid.txt)
          echo "API created in API Manager with ID ${new_api_id}"
          echo "::set-output name=api_id::${api_id}"
