name: Publish Asset and Create API

on:
  push:
    branches:
      - main


jobs:
  publish_and_create_api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Login to Anypoint Platform
        env:
          ANYPOINT_USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
          ANYPOINT_PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
        run: |
          response=$(curl -s -X POST "https://anypoint.mulesoft.com/accounts/login" \
            -H "Content-Type: application/json" \
            -d '{"username":"'${ANYPOINT_USERNAME}'","password":"'${ANYPOINT_PASSWORD}'"}')
          token=$(echo $response | jq -r '.access_token')
          echo "Anypoint Platform login successful"
        id: login
        continue-on-error: true
          
      - name: Check if login was successful
        run: |
          if [ -z "${{ steps.login.outputs }}" ]; then
            echo "Error: Login failed"
            exit 1
          fi

      - name: Publish Asset to Exchange
        env:
          ANYPOINT_TOKEN: ${{ secrets.ANYPOINT_TOKEN }}
        run: |          
           status=$(curl -s -w "%{http_code}" -o /dev/null --location 'https://anypoint.mulesoft.com/exchange/api/v1/assets' \
             --header 'Authorization: Bearer e93d4b8d-c2aa-41a6-869e-ba8534bb0c0b' \
             --form 'organizationId="8ccbc578-b790-45f9-9859-bca06c81adcd"' \
             --form 'groupId="8ccbc578-b790-45f9-9859-bca06c81adcd"' \
             --form 'assetId="mycicddemoapiaprilgha"' \
             --form 'version="1.0.32"' \
             --form 'name="my cicd demo app new gha"' \
             --form 'classifier="raml"' \
             --form 'apiVersion="v1"' \
             --form "asset=@./calculator.raml")
           echo "Asset published to Exchange successfully"
           echo "Asset published successfully with status code ${{ steps.publish_asset.outputs.status }}"
           echo "::set-output name=status::$status"
        id: publish_asset
        continue-on-error: true
        
      - name: Check if asset was published successfully
          echo "Asset publishing status code ${{ steps.publish_asset.outputs.status }}"
        if: success() && (steps.publish_asset.outputs.status != '201' && steps.publish_asset.outputs.status != '200')     
        run: |
          echo "Error: Failed to publish asset"
          exit 1
      - name: Check if API ID exists in API Manager
        if: success()
        env:
          apialreadyCreated: 'No'
        run: |
         api_id=$(cat ./mynewapiid.txt)
          if [ -z "${api_id}" ]; then
            run: echo "Create API in API Manager output: ${{ steps.step1.outputs.my-output }}"
          else
            echo "API ID exists in API Manager"
            env:
              apialreadyCreated: 'Yes'
         run: |
           api_id=$(curl --location --request PATCH 'https://anypoint.mulesoft.com/apimanager/api/v1/organizations/8ccbc578-b790-45f9-9859-bca06c81adcd/environments/7001f5f5-7165-4e3c-833b-f63282df9523/apis/18660433' \
            --header 'Authorization: Bearer e93d4b8d-c2aa-41a6-869e-ba8534bb0c0b' \
            --header 'Content-Type: application/json' \
            --header 'Cookie: XSRF-TOKEN=e0WEQ67j-QASPpTuShsNYflSHjsDz15w2lSU; _csrf=oKQwgbfiUHeFPqnIfDz_rsKd; mulesoft.sess=eyJpZCI6IkViVVJfWHFzM1g5Z1hkU201MWhhblgzTmJyS1V0RXdUIiwicGFzc3BvcnQiOnsidXNlciI6eyJ1c2VyX2lkIjoiZmU0ZDgzYjUtNGFmMi00MGZhLWFkYjgtMTJhNmQ1ZTdiYzVhIn19fQ==; mulesoft.sess.sig=G8muQqC4Sdlivayk8QKMYZgoYtk' \
            --data '{"spec":{"groupId":"8ccbc578-b790-45f9-9859-bca06c81adcd","assetId":"mycicddemoapi28april","version":"1.0.1"},"endpoint":{"uri":null,"proxyUri":null,"isCloudHub":true,"muleVersion4OrAbove":true,"type":null,"deploymentType":"CH"},"instanceLabel":"testCICD"}' | jq -r '.id')
           echo "API Updated in API Manager with ID ${api_id}"
           echo "${api_id}" > ./mynewapiid.txt
            
            exit 0
         fi
      - name: Create API in API Manager
        if:  ${{ env.apialreadyCreated != 'Yes'}}
        env:
          ANYPOINT_TOKEN: ${{ secrets.ANYPOINT_TOKEN }}
          ANYPOINT_ORG_ID: ${{ secrets.ANYPOINT_ORG_ID }}
          API_DEFINITION_FILE: ./apidefinition.raml
          API_ID_FILE: api_id.txt

        run: |
           api_id=$(curl --location 'https://anypoint.mulesoft.com/apimanager/api/v1/organizations/8ccbc578-b790-45f9-9859-bca06c81adcd/environments/7001f5f5-7165-4e3c-833b-f63282df9523/apis' \
            --header 'Authorization: Bearer e93d4b8d-c2aa-41a6-869e-ba8534bb0c0b' \
            --header 'Content-Type: application/json' \
            --data '{"spec":{"groupId":"8ccbc578-b790-45f9-9859-bca06c81adcd","assetId":"mycicddemoapi28april","version":"1.0.0"},"endpoint":{"uri":null,"proxyUri":null,"isCloudHub":true,"muleVersion4OrAbove":true,"type":null,"deploymentType":"CH"},"instanceLabel":null}' | jq -r '.id')
           echo "API created in API Manager with ID ${api_id}"
           echo "${api_id}" > ./mynewapiid.txt

           
      - name: Commit API ID to repo
        run: |
         git config --local user.email "nageshambati100@gmail.com"
         git config --local user.name "nageshambati100"
         git add ./mynewapiid.txt
         git commit -m "Add API ID"
      - name: Read API ID
        run: |
          new_api_id=$(cat ./mynewapiid.txt)
          echo "API created in API Manager with ID ${new_api_id}"
          echo "::set-output name=api_id::${api_id}"
